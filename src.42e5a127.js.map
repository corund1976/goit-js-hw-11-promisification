{"version":3,"sources":["index.js"],"names":["users","name","active","toggleUserState","allUsers","userName","Promise","resolve","reject","map","user","error","logger","updatedUsers","console","table","then","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","setTimeout","id","time","logSuccess","log","logError","warn","amount","catch"],"mappings":";AAkBA,MAAMA,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAanBC,EAAkB,CAACC,EAAUC,IAC1B,IAAIC,QAAQ,CAACC,EAASC,KAI3BD,EAHyBH,EAASK,IAAIC,GACpCA,EAAKT,OAASI,EAAW,IAAKK,EAAMR,QAASQ,EAAKR,QAAWQ,IAG/DF,EAAOG,SAILC,EAASC,GAAgBC,QAAQC,MAAMF,GAW7CV,EAAgBH,EAAO,SAASgB,KAAKJ,GACrCT,EAAgBH,EAAO,OAAOgB,KAAKJ,GAGnC,MAAMK,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAmBhDK,EAAmBC,GAChB,IAAIlB,QAAQ,CAACC,EAASC,KACrBiB,MAAAA,EAAQR,EAA0B,IAAK,KAE7CS,WAAW,KACUN,KAAKE,SAAW,GAGjCf,EAAQ,CAACoB,GAAIH,EAAYG,GAAIC,KAAMH,IAEnCjB,EAAOgB,EAAYG,KAGpBF,KAODI,EAAa,EAAGF,GAAAA,EAAIC,KAAAA,MACxBd,QAAQgB,mBAAmBH,kBAAmBC,QAG1CG,EAAWJ,IACfb,QAAQkB,qCAAqCL,+BAa/CJ,EAAgB,CAAEI,GAAI,GAAIM,OAAQ,MAC/BjB,KAAKa,GACLK,MAAMH,GAETR,EAAgB,CAAEI,GAAI,GAAIM,OAAQ,MAC/BjB,KAAKa,GACLK,MAAMH,GAETR,EAAgB,CAAEI,GAAI,GAAIM,OAAQ,KAC/BjB,KAAKa,GACLK,MAAMH,GAETR,EAAgB,CAAEI,GAAI,GAAIM,OAAQ,MAC/BjB,KAAKa,GACLK,MAAMH","file":"src.42e5a127.js","sourceRoot":"../src","sourcesContent":["//========= Задание №1 =========\n// const delay = ms => {\n//     return new Promise((resolve, reject) => {\n//         setTimeout(() => {\n//             resolve(ms);\n//             reject(\"error\");\n//         }, ms);\n//     });\n// };\n\n// const logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\n// delay(2000).then(logger); // Resolved after 2000ms\n// delay(1000).then(logger); // Resolved after 1000ms\n// delay(1500).then(logger); // Resolved after 1500ms\n\n//========= Задание №2 =========\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\n// было до промисификации\n// const toggleUserState = (allUsers, userName, callback) => {\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === userName ? { ...user, active: !user.active } : user,\n//   );\n\n//   callback(updatedUsers);\n// };\n\n// стало после промисификации\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise((resolve, reject) => {\n        const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    resolve(updatedUsers);\n    reject(error);\n  })\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * до промисификации работает так\n */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n/*\n * после промисификации Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n\n//========= Задание №3 =========\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\n// было до промисификации\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//   const delay = randomIntegerFromInterval(200, 500);\n\n//   setTimeout(() => {\n//     const canProcess = Math.random() > 0.3;\n\n//     if (canProcess) {\n//       onSuccess(transaction.id, delay);\n//     } else {\n//       onError(transaction.id);\n//     }\n//   }, delay);\n// };\n\n// стало после промисификации\nconst makeTransaction = (transaction) => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({id: transaction.id, time: delay});\n      } else {\n        reject(transaction.id);\n      }\n\n    }, delay);\n\n  })\n};\n\n// до промисификации\n// const logSuccess = ( id, time ) => {\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * до промисификации Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * после промисификации Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n\n"]}